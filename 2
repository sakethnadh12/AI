def print_board(board):
    """
    Function to print the chessboard with queens placed.
    """
    for row in board:
        print(" ".join(row))
    print()

def is_safe(board, row, col):
    """
    Function to check if a queen can be placed on board[row][col].
    This function checks the row, upper diagonal and lower diagonal.
    """
    for i in range(col):
        if board[row][i] == 'Q':
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False

    for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False

    return True

def solve_n_queens(board, col):
    """
    Function to solve the N-Queens problem using backtracking.
    """
    if col >= len(board):
        return True

    for i in range(len(board)):
        if is_safe(board, i, col):
            board[i][col] = 'Q'
            if solve_n_queens(board, col + 1):
                return True
            board[i][col] = '.'  # Backtrack

    return False

def solve_8_queens():
    """
    Function to initialize the board and call the solver for the 8-queens problem.
    """
    board = [['.' for _ in range(8)] for _ in range(8)]
    if solve_n_queens(board, 0):
        print_board(board)
    else:
        print("No solution exists.")

# Run the solver
solve_8_queens()
